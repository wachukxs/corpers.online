<!Doctype HTML>
<HTML>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title> 
    Corpers Online \ MAP
    </title>

    <link rel="shortcut icon" type="image/png" href="logo/new/logo32x32.png"/>
    
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css"
       integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
       crossorigin=""/>
       
     <!-- ask questions about places on maps! -->
     <!-- Make sure you put this AFTER Leaflet's CSS -->
     <script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"
       integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA=="
       crossorigin=""></script>

       <!--icons for display on map-->
       <!--<link rel="stylesheet" href="/font-awesome.min.css">-->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css"
        integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">

        <!-- leaflet toolbar npm package from https://github.com/Leaflet/Leaflet.toolbar -->
       <!-- <script src="/leaflet-toolbar/dist/leaflet.toolbar.js"></script>
       <link rel="stylesheet" href="/leaflet-toolbar/dist/leaflet.toolbar.css"/> -->
       

       <!--Leaflet Routing Machine is easy.--------------- -->
       <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
       <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>

       
    <!-- Load Esri Leaflet from CDN -->
    <script src="https://unpkg.com/esri-leaflet@2.2.3/dist/esri-leaflet.js"
    integrity="sha512-YZ6b5bXRVwipfqul5krehD9qlbJzc6KOGXYsDjU9HHXW2gK57xmWl2gU6nAegiErAqFXhygKIsWPKbjLPXVb2g=="
    crossorigin=""></script>

    <!--jquery-->
    <script src="jquery-3.3.1.min.js"></script>


    <!--bootstrap-->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>



  <!-- Load Esri Leaflet Geocoder from CDN -->
  <link rel="stylesheet" href="https://unpkg.com/esri-leaflet-geocoder@2.2.13/dist/esri-leaflet-geocoder.css"
    integrity="sha512-v5YmWLm8KqAAmg5808pETiccEohtt8rPVMGQ1jA6jqkWVydV5Cuz3nJ9fQ7ittSxvuqsvI9RSGfVoKPaAJZ/AQ=="
    crossorigin="">
  <script src="https://unpkg.com/esri-leaflet-geocoder@2.2.13/dist/esri-leaflet-geocoder.js"
    integrity="sha512-zdT4Pc2tIrc6uoYly2Wp8jh6EPEWaveqqD3sT0lf5yei19BC1WulGuh5CesB0ldBKZieKGD7Qyf/G0jdSe016A=="
    crossorigin=""></script>
    
    
    <!--socket.io-->
    <script src="/socket.io/socket.io.js"></script>

    <script>
        var socket = io.connect('/map');
    </script>
    <style>
        body {
            padding: 0;
            margin: 0;
        }
        html, body, #mapid {
            height: 100%;/*we use percentage for height. While 100vh is arguably better, due to a bug with Google Chrome on mobile.*/
            width: 100vw;
        }
        /*#mapid { height: 97vh; }*/
	
	
        .makehand{
            cursor: pointer;
            font-size: 15px;
            font-weight:bold;
        }
        
        /*
        #map_canvas {background: transparent url(images/ajax-loading.gif) no-repeat center center;}
        */
    </style>

    <style>
        /*map loader*/
        .lds-ripple {
        display: inline-block;
        position: relative;
        width: 64px;
        height: 64px;
        }
        .lds-ripple div {
        position: absolute;
        border: 4px solid #fff;
        opacity: 1;
        border-radius: 50%;
        animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
        }
        .lds-ripple div:nth-child(2) {
        animation-delay: -0.5s;
        }
        @keyframes lds-ripple {
        0% {
            top: 28px;
            left: 28px;
            width: 0;
            height: 0;
            opacity: 1;
        }
        100% {
            top: -1px;
            left: -1px;
            width: 58px;
            height: 58px;
            opacity: 0;
        }
        }

    </style>
    </head>
    


<body>

    <!-- Modal for add place-->
    <div class="modal fade" id="AddPlace" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
                <form method="POST" enctype="application/x-www-form-urlencoded" name="addplace">


            <div class="modal-header">
              <div>
                    <h5 class="modal-title">Add [location : accomodation/PPA/SPA]</h5>
                    <small>Try to fill out all feilds</small>
              </div>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
                
                    <div class="form-group">
                        <label for="nameOfPlace">Name of Place:</label>
                        <input type="text" name="nameOfPlace" id="nameOfPlace" class="form-control" aria-describedby="nameOfPlace" placeholder="e.g. Ikeja City Mall, Federal High Court Abuja" required>
                    </div>

                    <div class="form-group">
                        <label for="street">Street:</label>
                        <input type="text" name="street" id="Street" class="form-control" aria-describedby="streetHelp" placeholder="e.g. Benson Road, D Line, Road D7, Nwachukwu Drive">        
                    </div>

                    <div class="form-group">
                        <label for="category">Category:</label>
                        <input type="text" name="category" list="category" id="Category" class="form-control" aria-describedby="categoryHelp" placeholder="School, Hospital, Corporate office, ATM" required>

                        <datalist id="category">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="School">
                            <option value="Hospital">
                            <option value="Corporate office">
                            <option value="ATM">
                            <option value="Bank">
                            <option value="Industory">
                            <option value="Mosque">
                            <option value="Bus stop">
                            <option value="Shop">
                            <option value="Stadium">
                            <option value="Airport">
                            <option value="Market">
                            <option value="Church">
                            <option value="Hotel">
                            <option value="University">
                        </datalist>
                    </div>

                    
					
                    <label for="lga">Area</label>
                    <div class="input-group">
                          <input type="text" list="lga" name="lga" id="lga1" class="form-control" id="lga" placeholder="LGA" value="" required>

                            <datalist id="lga">

                            </datalist>
                          <input type="text" list="district" name="district" id="district1" class="form-control" id="district" placeholder="District" value="" required>
                          <datalist id="district">

                          </datalist>
                    </div>
                    <div class="valid-feedback">
                      Looks good!
                    </div>

               

            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <input type="submit" value="Save Changes" id="spd"class="btn btn-primary">
            </div>


        </form>
          </div>
        </div>
      </div>


      <!-- Modal for location error-->
<div class="modal fade" id="LocationError" tabindex="-1" role="dialog" aria-labelledby="LocationErrorTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLongTitle">Mehn</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          We couldn't locate you.
          <br>
          <small id="AddError">For ...error code ...reason.</small>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary btn-sm"><small>Try again when network detected</small></button>
        </div>
      </div>
    </div>
  </div>




 <div id="mapid">

    <div class="lds-ripple">
        <div></div>
        <div></div>
    </div>

 </div>
 <script>
 //
 var mymap = L.map('mapid', { tilt: true, zoomControl: false }).setView([5.5216578, 7.5066884], 16);
 
 
 L.tileLayer('https://api.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiY2h1a3MwMDciLCJhIjoiY2psOW1iZ2x0MXRoczNycGJwdzhpOGZhbCJ9.z03GKFAu-scE70Z1JKagOg', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox.streets',
                accessToken: 'pk.eyJ1IjoiY2h1a3MwMDciLCJhIjoiY2psOW1iZ2x0MXRoczNycGJwdzhpOGZhbCJ9.z03GKFAu-scE70Z1JKagOg'
}).addTo(mymap);

L.control.zoom({position: 'topright'}).addTo(mymap);

// loader for when map is loading
mymap.on('loading', function (event) {
    console.log('start loading tiles');
});
mymap.on('load', function (event) {
  console.log('all tiles loaded');
});
mymap.on('tileloadstart', function (event) {
    console.log('start loading 1 tile');
});

mymap.on('zoom', function (event) { // based on where people expand in our maps, we'll know what they are intrested in, and we'd ask other corpers to provide info about such places.
    console.log("Map zoom level:", mymap.getZoom(), event);
    // then maybe later, for optimization, just focus on the area the user is seeing, so we won't waste too much js memory
    var ilist = document.getElementsByClassName('custom-icons');

    // https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons
    switch (mymap.getZoom()) {
        case (1):
        case (2):
        case (3):
        case (4):
        case (5):
        case (6):
        case (7):
        case (8):
        case (9):
        case (10):
        case (11):
        case (12):
        case (13):
            for (var i = 0; i < ilist.length; i++) {
                document.getElementsByClassName('custom-icons').item(i).style.display = "none";
                // also close all open popUPs on the icons
            }
            break;
        case ( 14 ):
            for (var i = 0; i < ilist.length; i++) {
                document.getElementsByClassName('custom-icons')[i].style.height = "15px";
                document.getElementsByClassName('custom-icons').item(i).style.display = "block";
                // or
                document.getElementsByClassName('custom-icons')[i].classList.remove('fa-2x');
                document.getElementsByClassName('custom-icons')[i].classList.add('fa-xs');
            }
            break;
        case (15):
            for (var i = 0; i < ilist.length; i++) {
                document.getElementsByClassName('custom-icons')[i].style.height = "18px";
                document.getElementsByClassName('custom-icons').item(i).style.display = "block";
                // or
                document.getElementsByClassName('custom-icons')[i].classList.remove('fa-2x');
                document.getElementsByClassName('custom-icons')[i].classList.add('fa-sm');
            }
            break;
        case (16):
            for (var i = 0; i < ilist.length; i++) {
                document.getElementsByClassName('custom-icons')[i].style.height = "20px";
                document.getElementsByClassName('custom-icons').item(i).style.display = "block";
                // or
                document.getElementsByClassName('custom-icons')[i].classList.remove('fa-2x');
                document.getElementsByClassName('custom-icons')[i].classList.add('fa-lg');
                // document.getElementsByClassName('custom-icons')[i].classList.replace('fa-2x', 'fa-lg');
            }
            break;
        case (17):
        case (18):
            for (var i = 0; i < ilist.length; i++) {
                document.getElementsByClassName('custom-icons')[i].style.height = "30px";
                document.getElementsByClassName('custom-icons').item(i).style.display = "block";
                // or
                document.getElementsByClassName('custom-icons')[i].classList.remove('oldClass', 'fa-2x');
                document.getElementsByClassName('custom-icons')[i].classList.add('fa-2x');
            }
            break;
        default:
            break;
    }
});


var myIcon = L.icon({
    iconUrl: 'https://icon.now.sh/local_printshop',
    iconSize: [30, 30],
    iconAnchor: [22, 94],
    popupAnchor: [-7, -85], // documentation used [-3, -76], it wasn't exactly properly aligned to the icon, maybe it's directly on the latlng point but ...no
    shadowUrl: null,
    shadowSize: [68, 95],
    shadowAnchor: [22, 94],
    className: 'custom-icons' // no space
});
L.marker([5.521697329407013, 7.514498233795167], { icon: myIcon }).addTo(mymap).bindPopup("A print shop.");

var myIcon = L.icon({
    iconUrl: 'https://icon.now.sh/local_pharmacy',
    iconSize: [30, 30],
    iconAnchor: [22, 94],
    popupAnchor: [-3, -76],
    shadowUrl: null,
    shadowSize: [68, 95],
    shadowAnchor: [22, 94],
    className: 'custom-icons' // no space between class name
});
L.marker([5.521889552319924, 7.512137889862061], { icon: myIcon }).addTo(mymap);

/* mymap.on({zoom: function (event) {
    console.log("Map 6666zoom level:", mymap.getZoom(), event);
} }); */

// https://esri.github.io/esri-leaflet/api-reference/controls/geosearch.html

     var arcgisOnline = L.esri.Geocoding.arcgisOnlineProvider();
     var gisDay = L.esri.Geocoding.featureLayerProvider({
         url: 'https://services.arcgis.com/uCXeTVveQzP4IIcx/arcgis/rest/services/GIS_Day_Final/FeatureServer/0',
         searchFields: ['Name', 'Organization'], // Search these fields for text matches
         label: 'GIS Day Events', // Group suggestions under this header
         formatSuggestion: function (feature) {
             return feature.properties.Name + ' - ' + feature.properties.Organization; // format suggestions like this.
         }
     });

     var searchControl = L.esri.Geocoding.geosearch({
         providers: [arcgisOnline, gisDay], // will geocode via ArcGIS Online and search the GIS Day feature service.
         expanded: true,
         collapseAfterResult: false,
         placeholder: 'Search for places'
     }).addTo(mymap);

var results = L.layerGroup().addTo(mymap);

  searchControl.on('results', function(data){
    results.clearLayers();
    for (var i = data.results.length - 1; i >= 0; i--) {
      results.addLayer(L.marker(data.results[i].latlng));
    }
  });            

var myLines2 = {
    "type": "LineString",
    "coordinates": []
};

var myStyleLines2 = {
    "color": "#ff7800",
    "weight": 2,
    "opacity": 0.65
};



mymap.on('click', function(e) { // do not delete
console.log(([e.latlng.lat, e.latlng.lng]).toString());
    /* 
    L.popup()
        .setLatLng(e.latlng)
        .setContent("You clicked the map at " + ([e.latlng.lng, e.latlng.lat]).toString() ) //say the name of the place they clicked!
        .openOn(mymap);


        console.log(e);
        myLines2.coordinates.push([e.latlng.lng, e.latlng.lat]);
        console.log(myLines2);
        
        L.geoJSON(myLines2, {
            style: myStyleLines2
        }).addTo(mymap);

        //when user clicks another line, say you moved ).30 north and this distance.
 */
});

//if the device tilts.
L.TiltHandler = L.Handler.extend({
    addHooks: function() {
        L.DomEvent.on(window, 'deviceorientation', this._tilt, this);
    },

    removeHooks: function() {
        L.DomEvent.off(window, 'deviceorientation', this._tilt, this);
    },

    _tilt: function(ev) {
        // Treat Gamma angle as horizontal pan (1 degree = 1 pixel) and Beta angle as vertical pan
        this._map.panBy( L.point( ev.gamma, ev.beta ) );
    }
});

L.Map.addInitHook('addHandler', 'tilt', L.TiltHandler);
/*
     L.Routing.control({
         waypoints: [
             L.latLng(5.52539227003423, 7.509562969207765),
             L.latLng(5.5270795473951795, 7.516322135925294)
         ]
     }).addTo(mymap);
*/
// Our handler can now be enabled by running map.tilt.enable() and disabled by map.tilt.disable()

var myLines = {
    "type": "LineString",
    "coordinates": []
};

var myStyleLines = {
    "color": "#ff7800",
    "weight": 2,
    "opacity": 0.65
};

// add new toolbar
L.Control.Toolbar = L.Control.extend({
    options: {
        position: 'bottomright' 
        // control position - allowed: 'topleft', 'topright', 'bottomleft', 'bottomright'
    },
    
    onAdd: function(mymap) {
        var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom makehand');
        var position = L.DomUtil.create('a', '', container);
        position.title = 'Get current position';
        // position.innerHTML = '&#10991;' ; // &#x1f518;
        var track = L.DomUtil.create('a', '', container);
        track.title = 'Track your movement';
        // track.innerHTML = '&#11005;' ; // &#11005; | &#8889;

        var positionImg = L.DomUtil.create('img', '', position);
        var trackImg = L.DomUtil.create('img', '', track);

        var stopTrackImg = L.DomUtil.create('img', '');
        stopTrackImg.src = 'https://icon.now.sh/cancel';
        stopTrackImg.alt = '%'; // it distructs the icon
        stopTrackImg.onerror = "imgErr()"; // TODO for trackImg too, it doesn't work

        // Stop the given event from propagation to parent element(s)
        L.DomEvent.on(container, 'click dblclick', function (ev) {
            L.DomEvent.stopPropagation(ev);
        });

        function imgErr() {
            console.log('which');
        }

        positionImg.src = 'https://icon.now.sh/my_location';
        positionImg.alt = '#'; // it distructs the icon
        positionImg.onerror = "imgErr()"; // TODO for trackImg too, it doesn't work

        trackImg.src = 'https://icon.now.sh/navigation';
        trackImg.alt = '&'; // it distructs the icon
        trackImg.onerror = "imgErr()"; // seems the browser ignores doing the onerror if there's an alt attr.
        

        // https://icon.now.sh/add_location
        position.onclick = function(){
            console.log('position button clicked');
            // first find the user's current location/start tracking the add a marker
        
            // first find the user's current location
                
            function onLocationFound(e) {
                    
                var radius = e.accuracy / 2; // measurement in meters
                console.log(e);

                    function onClk(e){
                        console.log('clicked addPlace Marker!');
                    }
                    function onPO(){
                        // c.addTo(mymap);
                        if (document.getElementById('baptm')) {
                            console.log('we wanna add a place');
                        }
                    } 
                    // if user within 5 meters from location, add it. AND IF LOCATION ACCURACY IS NOT SO CORRECT THEN DON'T SHOW IT IN THE MAP !!! NOT EVERYONE IS IN LAGOS, ALSO SHOW THEM THE STATE THEY'RE IN AND THE lga FIRST
                    // Only display those icons when the user is in a good enough zoom level
                    var p = L.marker(e.latlng).on({click: onClk}).addTo(mymap)
                        .bindPopup('<p> You\'re within '+
                            radius.toFixed(2) +
                            ' meters from this point.</p>'+
                            ( radius.toFixed(2) <= 10.50  ? ' <hr/> <small><button data-toggle="modal" data-target="#AddPlace" id="baptm" class="btn btn-primary btn-sm"> Add location to map</button></small> ' : '' ))
                        .openPopup().on({popupopen: onPO}) ;
                    // after 3.5 sec closePopup()
                    setTimeout(() => {
                        p.closePopup();
                    }, 3500);
                    // if we couldn't get a so accurate location but got a resonable accurate info, then user can drag the marker to point. means we have to then make marker draggable

                    var c = L.circle(e.latlng, {radius: radius, stroke: false}).addTo(mymap);
                    // after 3.5 sec remove circle
                    setTimeout(() => c.remove(),3500);

                    // p.on('popupopen', c.addTo(mymap) );

                    // make it so that when ever the popUP is open, the event listerner is added ... also (if it doesn't work so that the app place button works even if it has been dismissed because of clicking the marker (to show the popUp) again n again.)
            
                    //then save it.

                    //then get the altitude and it's accuracy and determine if the apartment is an upstairs
                    //then point the map in the direction of movement var e.heading
            }
                
            mymap.on('locationfound', onLocationFound);

            // error ?
            function onLocationError(e) {
                document.getElementById('AddError').innerHTML = e.message ;
                $("#LocationError").modal();
            }
            
            mymap.on('locationerror', onLocationError);
    
            // acutally finding it
            mymap.locate({setView: true, enableHighAccuracy: true, timeout: 5000, maximumAge: 0});

        // then save it.
        }

        // variable to toggle the track or not-track value
        trk = false;
        track.onclick = function(trackEvent){
            // first find the user's current location/start tracking the add a marker
                //first find the user's current location
                function onLocationFound(e) {
                    var radius = e.accuracy / 2;
                    console.log(e);
                    // instead show a small pop up telling them how many distance they move/ have moved overtime or for every change in position we record
                    /* L.marker(e.latlng)
                        .addTo(mymap)
                        .bindPopup("You are within " + radius.toFixed(2) + " meters from this point")
                        .openPopup();
                
                    L.circle(e.latlng, radius).addTo(mymap); */

                    myLines.coordinates.push([e.longitude, e.latitude]);

                    console.log(myLines);
                    
                    L.geoJSON(myLines, {
                        style: myStyleLines
                    }).addTo(mymap);

                    // send myLines to server after all the tracking has been done ORrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr
                    socket.emit('tracking', myLines, (f) => {
                        // this funtion will run here to show the server has gotten our message.
                        console.log('server got map data r in meters ?', f); // data will be argument of function on server
                    });

                }
                
                mymap.on('locationfound', onLocationFound);


                // error ?
                function onLocationError(e) {
                    alert(e.message);
                }
                
                mymap.on('locationerror', onLocationError);
                
                // Our tilt handler can now be enabled by running map.tilt.enable()
                

                // acutally tracking corper
                trk = !trk; // or trk ^= true; // but makes it 0 or 1
                console.log('track?', trk);
                if (trk) {
                    mymap.locate({setView: true, enableHighAccuracy: true, watch: true});

                    // remove the track image
                    L.DomUtil.remove(trackImg);

                    // then put the stop track img
                    track.append(stopTrackImg);

                    // track.innerHTML = '#' ; // '&#8889;' or '#'
                    track.title = 'Stop tracking movement';
                } else {
                    console.log('send2server', myLines);
                    
                    // send myLines to server everytime, then server compiles all the LATLNG ooooooorrrrrrrrrrrrrrrrrrr
                    socket.emit('tracking', myLines, (f) => {
                        // this funtion will run here to show the server has gotten our message.
                        console.log('server got map data r in meters ?', f); // data will be argument of function on server
                    });

                    mymap.stopLocate();
                    
                    // remove the stop track image
                    L.DomUtil.remove(stopTrackImg);

                    // then put the track image
                    track.append(trackImg);
                    // track.innerHTML = '&#11005;' ;
                    track.title = 'Track your movement';
                }
                
                
        // then save it.
        }

        return container;
    },

    onRemove: function(mymap) {
        // Nothing to do here
    }
});

L.control.toolbar = function(opts) {
    return new L.Control.Toolbar(opts);
}

L.control.toolbar().addTo(mymap);


/*when user logs in, and owns an account. we can keep record of their data like PPA, SPA and whatever they want to save.*/


/**

Public mapbox access token:
pk.eyJ1IjoiY2h1a3MwMDciLCJhIjoiY2psOW1iZ2x0MXRoczNycGJwdzhpOGZhbCJ9.z03GKFAu-scE70Z1JKagOg
*/


/*
addHandler(<String> name, <Function> HandlerClass)

locate(<Locate options> options?)
locationerror
locationfound
stopLocate()

addControl(<Control> control)

removeControl(<Control> control)
*/

// ------change the icon, and the text that shows and what happens/shows when user clicks

var yes = [{
    "type": "Feature",
    "properties": {
        "name": "Coors Field",
        "amenity": "Hospital",
        "popupContent": "The Amenity [Hospital], then the location/street name."
    },
    "geometry": {
        "type": "Point",
        "coordinates": [7.5098633766174325,5.515524804961825]
    }
}, {
    "type": "Feature",
    "properties": {
        "name": "Coors Field",
        "amenity": "School",
        "popupContent": "What kind of content show we show?"
    },
    "geometry": {
        "type": "Point",
        "coordinates": [7.505314350128175,5.516827661490997]
    }
}, {
    "type": "Feature",
    "properties": {
        "name": "Coors Field",
        "amenity": "Hospital",
        "popupContent": "You know to find a dfr"
    },
    "geometry": {
        "type": "Point",
        "coordinates": [7.508361339569093,5.523064246544109]
    }
}];
// GENERAL RULES: THE popupAnchor for fas fa-[amenity] is [5, -2] for when it's big and [0, 0] (we're gonna try to find a middle ground) for when it's small and for icon.now.sh is [-7, -85]
var school = L.divIcon({ 
    className: 'custom-icons fas fa-school fa-2x',
    popupAnchor: [3, 0], // documentation used [-3, -76], it wasn't exactly properly aligned to the icon, maybe it's directly on the latlng point but ...no
});

var hospital = L.divIcon({
    className: 'custom-icons fas fa-hospital fa-2x',
    popupAnchor: [5, -2], // documentation used [-3, -76], it wasn't exactly properly aligned to the icon, maybe it's directly on the latlng point but ...no
});

// you can set .my-div-icon styles in CSS
// L.marker([5.524986, 7.497182], { icon: university }).addTo(mymap);

//pppppp

L.geoJSON(yes, {
    pointToLayer: function (feature, latlng) {
        console.log(feature, latlng);
        switch (feature.properties.amenity) {
            case 'Hospital': return L.marker(latlng, { icon: hospital, title: feature.properties.popupContent });
            case 'School': return L.marker(latlng, { icon: school, title: feature.properties.popupContent });
        }
    }
}).bindPopup(function (layer) {
    console.log('layer', layer.defaultOptions.icon.options.className.includes('fa-sm'), layer.defaultOptions.icon.options.className.includes('fa-xs'), layer ); // layer.defaultOptions.icon.options.popupAnchor = [0, 0] if layer.defaultOptions.icon.options.className.has()
    return layer.feature.properties.popupContent;
}).addTo(mymap);

/*
var myStyle = {
    "color": "#ff7800",
    "weight": 5,
    "opacity": 0.65
};

L.geoJSON(yes, {
    style: myStyle
}).addTo(mymap);
*/


/*

also use either draggable markers and maybe static tiles to name junctions ...

use line string to name roads.


from https://leafletjs.com/examples/choropleth/

http://www.liedman.net/leaflet-routing-machine/tutorials/basic-usage/
under "Custom Info Control"
use the real time info to show current infromation like speed, speed limit on certain roads, position e.g concerning position you can show info like : you're along ikot-epene road, you just passed Oando filling satation, it seems you just stopped at Ostrich bakery. stuffs like that
*/
/*-------------------------------- routing -------------------------------------------------*/
/*
 * 
// http://www.liedman.net/leaflet-routing-machine/api/#l-routing-control
L.Routing.control({
    waypoints: [
      L.latLng(5.52539227003423, 7.509562969207765),
      L.latLng(5.5270795473951795, 7.516322135925294)
    ]
  }).addTo(mymap);
*/


/*-------------------------------- add place -------------------------------------------------*/
// name a road feature too. there must be restrictions, like you can only name a [relatively] straight road, cause if it's bemt then th ebent road has a different name. you can only name roads. [[[[how can we even add roads????]]]]

// add change event listners to the fields so we know what's up and can be proactive.
// as user leaves from one field to another, add it to the geojson
// use socket.io to send data to db
     
var street = document.getElementById('Street');
function st(){

}
street.addEventListener('keyup', st, false);

var category = document.getElementById('Category');

function cs(){
// offer suggetions and validate input
}
category.addEventListener('keyup', cs, false);


var nameOfPlace = document.getElementById('nameOfPlace');
function naop(){

}
nameOfPlace.addEventListener('keyup', naop, false);


/////test modal events to know when they fire and use appropraitely
$('#AddPlace').on('show.bs.modal', function (e) {
    // do something...
    console.log('show.bs.modal');
})
$('#AddPlace').on('shown.bs.modal', function (e) {
    // do something...after it has shown
    console.log('shown.bs.modal');
    $('#nameOfPlace').trigger('focus');

    document.forms[0][0].onchange = function(event){
        console.log(event);
    }

    document.forms[0][1].onchange = function(event){
        console.log(event);
    }

    document.forms[0][2].onchange = function(event){
        console.log(event);
    }


})
$('#AddPlace').on('hide.bs.modal', function (e) {
    // do something...
    console.log('hide.bs.modal');
    
})
$('#AddPlace').on('hidden.bs.modal', function (e) {
    // do something...
    console.log('hidden.bs.modal');
})



window.addEventListener("load", function () {
var form = document.forms.namedItem("addplace");
form.addEventListener('submit', function(ev) {

  var oOutput = document.querySelector("div"),
      oData = new FormData(form);
    //will use this for sth productive
  //oData.append("CustomField", "This is some extra data");

  var oReq = new XMLHttpRequest();
  oReq.open("POST", "/addplace", true);
  oReq.onload = function(oEvent) {
    if (oReq.status == 200) {
      oOutput.innerHTML = "Uploaded!";

      //show user that request sent successfully.
    } else {
      oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to submit.<br \/>";

      //if it didn't go through/submit, try again -esp when there's network.
    }
  };

  oReq.send(oData);
  console.log(oData);
  //close modal
  $('#AddPlace').modal('hide');
  ev.preventDefault();
}, false);
  });
</script>


<!--our icons from font awesome for markers-->
<script src="markers.js"></script>
<!-- 
    find out more about the project() method on leaflet 
    getZoomScale() and getScaleZoom() and getZoom()
    getCenter() and distance() setIcon()
-->
<script>


    socket.on('connect', function(){
      console.log('we\'re connected');
    });
    
    // when we receive a mapdata message
    socket.on('mapdata', function (data) {
    console.log('received mapdata', data);
    
    // send 'my other event' to everyone else
    
    // record the number of people that has seen a particular ad/post(like an accomodation). & show the sender.
    socket.emit('seen', { my: 'saw data, because we recieved it' });
    });


    
    // submit form data for add places

    var v = document.getElementById('spd');
    v.addEventListener('click', function(){
        var life = {
            nameOfPlace: document.forms[0][1].value,
            street: document.forms[0][2].value,
            category: document.forms[0][3].value,
            lga: document.forms[0][4].value,
            district: document.forms[0][5].value
        };
        socket.emit('addplace', {data: life});
    }, false);

</script>

</body>

</HTML>